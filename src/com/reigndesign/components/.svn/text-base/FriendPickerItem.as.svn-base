package com.reigndesign.components
{
	import aw.projects.assetmodifier.ModifierManager;
	import aw.projects.assetmodifier.modifiers.AssetStopModifier;
	
	import com.reigndesign.events.FriendPickerEvent;
	import com.reigndesign.models.Friend;
	
	import flash.display.Loader;
	import flash.display.LoaderInfo;
	import flash.display.MovieClip;
	import flash.events.DataEvent;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.net.URLRequest;
	import flash.system.LoaderContext;
	import flash.text.TextColorType;
	import flash.text.TextField;
	
	[Embed('assets/swf/assets.swf#FriendPickerItem')]
	public class FriendPickerItem extends MovieClip
	{
		public var friend:Friend;
		public var pic:MovieClip;
		public var check:MovieClip;
		public var txtLabel:TextField;
		
		private var _selected:Boolean;
		
		private var loader:Loader;
		
		public function FriendPickerItem(f:Friend)
		{
			super();
			
			this.addEventListener(Event.REMOVED_FROM_STAGE, onObjectRemoved, false, 0, true);
			
			var mgr:ModifierManager = new ModifierManager();
			mgr.registerModifier(new AssetStopModifier);
			mgr.apply(check);
			
			check.addEventListener(MouseEvent.CLICK, onCheckClick);
			
			setFriend(f);
		}
		
		public function setIconURL(url:String):void
		{
			loader = new Loader();
			
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoaderComplete);
			
			var lc:LoaderContext = new LoaderContext();
			lc.checkPolicyFile = false;
			loader.load(new URLRequest(url), lc);
			
			pic.addChild(loader);
			
		}
		
		protected function onLoaderComplete(e:Event):void
		{
			trace("loader image complete");
			var loaderInfo:LoaderInfo = e.target as LoaderInfo;
			loaderInfo.removeEventListener(Event.COMPLETE, onLoaderComplete);
			
			if(loaderInfo.width > 27 || loaderInfo.height > 27)
			{
				loader.width = loader.height = 27;
			}
		}
		
		public function setFriend(f:Friend):void
		{
			friend = f;
			txtLabel.text = f.name;
			this.setIconURL(f.profilePhoto);
		}
		
		public function select():void
		{
			_selected = true;
			check.gotoAndStop(2);
			dispatchEvent(new FriendPickerEvent(FriendPickerEvent.FriendPickerSelect, true, false, friend));
		}
		
		public function unselect():void
		{
			_selected = false;
			check.gotoAndStop(1);
			dispatchEvent(new FriendPickerEvent(FriendPickerEvent.FriendPickerUnselect, true, false, friend));
		}
		
		protected function onCheckClick(e:MouseEvent):void
		{
			if(_selected) 
				unselect();
			else
				select();
		}
		
		private function onObjectRemoved(e:Event):void
		{
			if(loader != null)
			{
				try{
					loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onLoaderComplete);
					loader.close();
					loader.unload();
					pic.removeChild(loader);
					loader = null;
					
					trace("closed");
				}
				catch(e:Error)
				{
					trace(e);
				}
				
			}
		}
	}
}